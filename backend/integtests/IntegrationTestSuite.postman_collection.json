{
	"info": {
		"_postman_id": "4e8b1ef9-67a9-43b0-b939-53289d9959e6",
		"name": "Integration Tests",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Get settings",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "90206dc1-c0f3-4d5d-a71a-ee80e17f123e",
						"exec": [
							"pm.test(\"returns 200 OK\", () => {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"has a setting for publishingGuidance\", () => {",
							"    const settings = pm.response.json();",
							"    pm.expect(settings.publishingGuidance).to.not.be.undefined;",
							"    pm.collectionVariables.set(\"settings.publishingGuidance\", settings.publishingGuidance);",
							"});",
							"",
							"pm.test(\"has a setting for dateTimeFormat\", () => {",
							"    const settings = pm.response.json();",
							"    pm.expect(settings.dateTimeFormat).to.not.be.undefined;",
							"    pm.expect(settings.dateTimeFormat.date).to.be.a(\"string\");",
							"    pm.expect(settings.dateTimeFormat.time).to.be.a(\"string\");",
							"});",
							"",
							"pm.test(\"returns updatedAt field\", () => {",
							"    const settings = pm.response.json();",
							"    pm.expect(settings.updatedAt).to.not.be.undefined;",
							"    pm.collectionVariables.set(\"settings.updatedAt\", settings.updatedAt);",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "45b061af-e5c3-45b2-9c08-3c64c6dd3be7",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/settings",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"settings"
					]
				},
				"description": "List topic areas to verify the newly created topic area shows up correctly. "
			},
			"response": []
		},
		{
			"name": "Get Homepage settings",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "30fb1f84-c254-4e92-9ceb-3444739ad593",
						"exec": [
							"pm.test(\"returns 200 OK\", () => {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"has a title and description\", () => {",
							"    const homepage = pm.response.json();",
							"    pm.expect(homepage.title).to.be.a(\"string\");",
							"    pm.expect(homepage.description).to.be.a(\"string\");",
							"    pm.collectionVariables.set(\"homepage.title\", homepage.title);",
							"    pm.collectionVariables.set(\"homepage.description\", homepage.description);",
							"});",
							"",
							"pm.test(\"has updatedAt field\", () => {",
							"    const homepage = pm.response.json();",
							"    pm.expect(homepage.updatedAt).to.be.a(\"string\");",
							"    pm.collectionVariables.set(\"homepage.updatedAt\", homepage.updatedAt);",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "d78e92fa-e898-4956-b05e-5e8548f6426b",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/settings/homepage",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"settings",
						"homepage"
					]
				},
				"description": "List topic areas to verify the newly created topic area shows up correctly. "
			},
			"response": []
		},
		{
			"name": "Update settings",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "9b3651d0-162c-4af7-9a5c-26c48906764e",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "89b7a2ca-0223-49a2-a5ce-8a26553d147e",
						"exec": [
							"pm.test(\"returns 200 OK\", () => {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"dateTimeFormat\": {\n        \"date\": \"YYYY-MM-DD\",\n        \"time\": \"HH:mm\"\n    },\n    \"publishingGuidance\": \"{{settings.publishingGuidance}}\",\n    \"updatedAt\": \"{{settings.updatedAt}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/settings",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"settings"
					]
				},
				"description": "Create new topic area for testing purposes"
			},
			"response": []
		},
		{
			"name": "Update homepage settings",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "97a0322b-2a99-4a16-8f57-3308d08979a5",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "fe4d87a2-e72d-4434-964d-da5ff60b5d85",
						"exec": [
							"pm.test(\"returns 200 OK\", () => {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"title\": \"{{homepage.title}}\",\n    \"description\": \"{{homepage.description}}\",\n    \"updatedAt\": \"{{homepage.updatedAt}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/settings/homepage",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"settings",
						"homepage"
					]
				},
				"description": "Create new topic area for testing purposes"
			},
			"response": []
		},
		{
			"name": "Create topic area",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "012d3c41-ab36-4fa8-89d5-5d633f1bb291",
						"exec": [
							"const testId = new Date().getTime();",
							"pm.collectionVariables.set(\"testId\", testId);",
							"pm.collectionVariables.set(\"topicarea.name\", testId);"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "6c66a648-6455-4827-8281-3f9dcf25e6b0",
						"exec": [
							"pm.test(\"returns 200 OK\", () => {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"returns the topic area id\", () => {",
							"    const topicarea = pm.response.json();",
							"    pm.expect(topicarea.id).to.exist;",
							"    pm.collectionVariables.set(\"topicarea.id\", topicarea.id);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"{{topicarea.name}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/topicarea",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"topicarea"
					]
				},
				"description": "Create new topic area for testing purposes"
			},
			"response": []
		},
		{
			"name": "List topic areas",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "bad2e8ec-1c78-45c3-bb12-e1e30202c543",
						"exec": [
							"pm.test(\"returns 200 OK\", () => {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"created topic area is listed\", () => {",
							"    const expectedId = pm.collectionVariables.get(\"topicarea.id\");",
							"    const topicareas = pm.response.json();",
							"    const filtered = topicareas.filter(topicarea => topicarea.id === expectedId);",
							"    const expectedTopicarea = filtered[0];",
							"    pm.expect(expectedTopicarea).to.not.be.undefined;",
							"    pm.expect(expectedTopicarea.id).to.equal(expectedId);",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "f02648d5-e767-407f-b08f-e40c5403cdb8",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/topicarea",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"topicarea"
					]
				},
				"description": "List topic areas to verify the newly created topic area shows up correctly. "
			},
			"response": []
		},
		{
			"name": "Rename topic area",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "98102928-bb4f-4ef5-b213-239255b3b30c",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "018988c7-c9d4-41e5-8a76-77b790ad5b9b",
						"exec": [
							"pm.test(\"returns 200 OK\", () => {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"{{$randomCompanyName}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/topicarea/:id",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"topicarea",
						":id"
					],
					"variable": [
						{
							"key": "id",
							"value": "{{topicarea.id}}"
						}
					]
				},
				"description": "Create new topic area for testing purposes"
			},
			"response": []
		},
		{
			"name": "Create dashboard",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "d036b4ce-0dc3-407b-a4f6-17022bcfd938",
						"exec": [
							"const testId = pm.variables.get(\"testId\");",
							"pm.collectionVariables.set(\"dashboard.name\", testId);"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "f6014853-2bf2-471f-ae0c-cfc816aaf99c",
						"exec": [
							"pm.test(\"returns 200 OK\", () => {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"returns the dashboard\", () => {",
							"    const dashboard = pm.response.json();",
							"    pm.expect(dashboard.id).to.exist;",
							"    pm.collectionVariables.set(\"dashboard.id\", dashboard.id);",
							"",
							"    pm.expect(dashboard.updatedAt).to.exist;",
							"    pm.collectionVariables.set(\"dashboard.updatedAt\", dashboard.updatedAt);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"{{dashboard.name}}\",\n    \"topicAreaId\": \"{{topicarea.id}}\",\n    \"description\": \"Some markdown for [testing](https://www.google.com)\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/dashboard",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"dashboard"
					]
				},
				"description": "Creates a dashboard in the newly created topic area"
			},
			"response": []
		},
		{
			"name": "Edit dashboard",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "b7d22fd8-6e96-4af7-a10e-41e6f44265a3",
						"exec": [
							"pm.test(\"returns 200 OK\", () => {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "bf182409-1c42-41e5-8896-64a814661d11",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"{{dashboard.name}} modified\",\n    \"topicAreaId\": \"{{topicarea.id}}\",\n    \"description\": \"Updated markdown **here**\",\n    \"updatedAt\": \"{{dashboard.updatedAt}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/dashboard/{{dashboard.id}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"dashboard",
						"{{dashboard.id}}"
					]
				},
				"description": "Changes the name of the test dashboard"
			},
			"response": []
		},
		{
			"name": "Get dashboard",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "cac8312b-f261-4adc-9960-4c18aa0677fd",
						"exec": [
							"pm.test(\"returns 200 OK\", () => {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"dashboard name matches\", () => {",
							"    const dashboard = pm.response.json();",
							"    const name = pm.collectionVariables.get(\"dashboard.name\");",
							"    const newName = name + \" modified\";",
							"    pm.expect(dashboard.name).to.equal(newName);",
							"    pm.collectionVariables.set(\"dashboard.name\", newName);",
							"});",
							"",
							"pm.test(\"dashboard description matches\", () => {",
							"    const dashboard = pm.response.json();",
							"    pm.expect(dashboard.description).to.equal(\"Updated markdown **here**\");",
							"});",
							"",
							"pm.test(\"dashboard topicarea matches\", () => {",
							"    const dashboard = pm.response.json();",
							"    const topicAreaId = pm.collectionVariables.get(\"topicarea.id\");",
							"    pm.expect(dashboard.topicAreaId).to.equal(topicAreaId);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/dashboard/{{dashboard.id}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"dashboard",
						"{{dashboard.id}}"
					]
				},
				"description": "Get dashboard by id to verify if new name has been set and dashboard can be retrieved properly."
			},
			"response": []
		},
		{
			"name": "Create text widget",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "1d15281d-3318-413e-a3b6-ba4faf8c2725",
						"exec": [
							"pm.test(\"returns 200 OK\", () => {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"returns the widget id\", () => {",
							"    const textwidget = pm.response.json();",
							"    pm.expect(textwidget.id).to.exist;",
							"    pm.collectionVariables.set(\"textwidget.id\", textwidget.id);",
							"",
							"    pm.expect(textwidget.updatedAt).to.exist;",
							"    pm.collectionVariables.set(\"textwidget.updatedAt\", textwidget.updatedAt);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"Text widget\",\n    \"widgetType\": \"Text\",\n    \"content\": {\n        \"text\": \"Lorem _ipsum_ **with markdown**\"\n    }\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/dashboard/{{dashboard.id}}/widget",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"dashboard",
						"{{dashboard.id}}",
						"widget"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create dataset (Ingest API)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "241b6ded-05d2-4418-8e37-7fdb72518b0f",
						"exec": [
							"pm.test(\"returns 200 OK\", () => {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"returns the dataset id\", () => {",
							"    const dataset = pm.response.json();",
							"    pm.expect(dataset.id).to.exist;",
							"    pm.collectionVariables.set(\"dataset.id\", dataset.id);",
							"});",
							"",
							"pm.test(\"returns the dataset s3Key\", () => {",
							"    const dataset = pm.response.json();",
							"    pm.expect(dataset.s3Key.json).to.exist;",
							"    pm.collectionVariables.set(\"dataset.s3Key.json\", dataset.s3Key.json);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "apikey",
					"apikey": [
						{
							"key": "in",
							"value": "header",
							"type": "string"
						},
						{
							"key": "value",
							"value": "{{apiKey}}",
							"type": "string"
						},
						{
							"key": "key",
							"value": "x-api-key",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"metadata\": {\n        \"name\": \"{{$randomWord}}\",\n        \"createdBy\": \"johndoe\"\n    },\n    \"data\": [{\"Year\":2016,\"Live Stream Attendees\":17000},{\"Year\":2017,\"Live Stream Attendees\":23000},{\"Year\":2018,\"Live Stream Attendees\":13500},{\"Year\":2019,\"Live Stream Attendees\":21100},{\"Year\":2020,\"Live Stream Attendees\":8450}]\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/ingestapi/dataset",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"ingestapi",
						"dataset"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update dataset (Ingest API)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "bbf34a5a-dcb1-49a3-bfe5-aaae070f5226",
						"exec": [
							"pm.test(\"returns 200 OK\", () => {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "apikey",
					"apikey": [
						{
							"key": "in",
							"value": "header",
							"type": "string"
						},
						{
							"key": "value",
							"value": "{{apiKey}}",
							"type": "string"
						},
						{
							"key": "key",
							"value": "x-api-key",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"metadata\": {\n        \"name\": \"{{$randomWord}}\"\n    },\n    \"data\": [{\"Year\":2016,\"Live Stream Attendees\":15000},{\"Year\":2017,\"Live Stream Attendees\":23000},{\"Year\":2018,\"Live Stream Attendees\":13500},{\"Year\":2019,\"Live Stream Attendees\":21100},{\"Year\":2020,\"Live Stream Attendees\":9050}]\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/ingestapi/dataset/:datasetId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"ingestapi",
						"dataset",
						":datasetId"
					],
					"variable": [
						{
							"key": "datasetId",
							"value": "{{dataset.id}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "List datasets",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "998cd59a-f683-445c-abda-c8aadbf7cf56",
						"exec": [
							"pm.test(\"returns 200 OK\", () => {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"returns a list of datasets\", () => {",
							"    const datasets = pm.response.json();",
							"    pm.expect(datasets).to.be.an(\"array\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/dataset/",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"dataset",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Create chart widget",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "a4d784e6-d943-496c-9bca-7e3a81854afd",
						"exec": [
							"pm.test(\"returns 200 OK\", () => {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"returns the widget id\", () => {",
							"    const chartwidget = pm.response.json();",
							"    pm.expect(chartwidget.id).to.exist;",
							"    pm.collectionVariables.set(\"chartwidget.id\", chartwidget.id);",
							"",
							"    pm.expect(chartwidget.updatedAt).to.exist;",
							"    pm.collectionVariables.set(\"chartwidget.updatedAt\", chartwidget.updatedAt);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"Chart widget\",\n    \"widgetType\": \"Chart\",\n    \"content\": {\n        \"title\": \"{{$randomWords}}\",\n        \"chartType\": \"LineChart\",\n        \"datasetId\": \"{{dataset.id}}\",\n        \"summary\": \"{{$randomLoremParagraph}}\",\n        \"s3Key\": {\n            \"raw\": \"\",\n            \"json\": \"{{dataset.s3Key.json}}\"\n        },\n        \"fileName\": \"{{$randomFileName}}\"\n    }\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/dashboard/{{dashboard.id}}/widget",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"dashboard",
						"{{dashboard.id}}",
						"widget"
					]
				}
			},
			"response": []
		},
		{
			"name": "Verify widgets are in dashboard",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "1f7ec05d-70fc-4034-a927-ff3d1312e309",
						"exec": [
							"pm.test(\"returns 200 OK\", () => {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"text widget is included in dashboard\", () => {",
							"    const dashboard = pm.response.json();",
							"    const textwidgetId = pm.collectionVariables.get(\"textwidget.id\");",
							"    pm.expect(dashboard.widgets).to.exist;",
							"",
							"    const widgets = dashboard.widgets.filter(widget => widget.id === textwidgetId);",
							"    pm.expect(widgets.length).to.equal(1);",
							"",
							"    const textwidget = widgets[0];",
							"    pm.expect(textwidget.id).to.equal(textwidgetId);",
							"    pm.expect(textwidget.widgetType).to.equal(\"Text\");",
							"});",
							"",
							"pm.test(\"chart widget is included in dashboard\", () => {",
							"    const dashboard = pm.response.json();",
							"    const chartWidgetId = pm.collectionVariables.get(\"chartwidget.id\");",
							"    pm.expect(dashboard.widgets).to.exist;",
							"",
							"    const widgets = dashboard.widgets.filter(widget => widget.id === chartWidgetId);",
							"    pm.expect(widgets.length).to.equal(1);",
							"",
							"    const chartWidget = widgets[0];",
							"    pm.expect(chartWidget.id).to.equal(chartWidgetId);",
							"    pm.expect(chartWidget.widgetType).to.equal(\"Chart\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/dashboard/{{dashboard.id}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"dashboard",
						"{{dashboard.id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Re-order widgets",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "1a40b187-aac1-4fa9-8ec5-3f0902d323c8",
						"exec": [
							"pm.test(\"returns 200 OK\", () => {",
							"    pm.response.to.have.status(200);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"widgets\": [\n        {\n            \"id\": \"{{textwidget.id}}\",\n            \"order\": 2,\n            \"updatedAt\": \"{{textwidget.updatedAt}}\"\n        },\n        {\n            \"id\": \"{{chartwidget.id}}\",\n            \"order\": 1,\n            \"updatedAt\": \"{{chartwidget.updatedAt}}\"\n        }\n    ]\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/dashboard/{{dashboard.id}}/widgetorder",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"dashboard",
						"{{dashboard.id}}",
						"widgetorder"
					]
				}
			},
			"response": []
		},
		{
			"name": "Fetch latest dashboard updatedAt",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "80cee280-eeaf-48fc-ad7f-7403b985eb7e",
						"exec": [
							"pm.test(\"returns 200 OK\", () => {",
							"    pm.response.to.have.status(200);",
							"    const dashboard = pm.response.json();",
							"    pm.collectionVariables.set(\"dashboard.updatedAt\", dashboard.updatedAt);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/dashboard/{{dashboard.id}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"dashboard",
						"{{dashboard.id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Verify draft dashboard is not yet public",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "5e3b123a-7af5-4e3e-9ced-42cf5797c3fc",
						"exec": [
							"pm.test(\"returns 404 not found\", () => {",
							"    pm.response.to.have.status(404);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/public/dashboard/:id",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"public",
						"dashboard",
						":id"
					],
					"variable": [
						{
							"key": "id",
							"value": "{{dashboard.id}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Set dashboard to publish pending",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "8673f50f-a215-4637-9615-eaaae5a4bf8a",
						"exec": [
							"pm.test(\"returns 200 OK\", () => {",
							"    pm.response.to.have.status(200);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"updatedAt\": \"{{dashboard.updatedAt}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/dashboard/{{dashboard.id}}/publishpending",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"dashboard",
						"{{dashboard.id}}",
						"publishpending"
					]
				}
			},
			"response": []
		},
		{
			"name": "Fetch latest dashboard updatedAt",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4aa4f5b0-a247-448c-b3fe-8c31761e4505",
						"exec": [
							"pm.test(\"returns 200 OK\", () => {",
							"    pm.response.to.have.status(200);",
							"    const dashboard = pm.response.json();",
							"    pm.collectionVariables.set(\"dashboard.updatedAt\", dashboard.updatedAt);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/dashboard/{{dashboard.id}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"dashboard",
						"{{dashboard.id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Publish dashboard",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "b9b6923d-2f5e-4339-bc2f-39aee616cbe5",
						"exec": [
							"pm.test(\"returns 200 OK\", () => {",
							"    pm.response.to.have.status(200);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"updatedAt\": \"{{dashboard.updatedAt}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/dashboard/{{dashboard.id}}/publish",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"dashboard",
						"{{dashboard.id}}",
						"publish"
					]
				}
			},
			"response": []
		},
		{
			"name": "Verify dashboard shows in homepage",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "a4def804-9a17-4e9a-a1d6-60c5cc672849",
						"exec": [
							"pm.test(\"returns 200 OK\", () => {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"homepage contains title and description\", () => {",
							"    const homepage = pm.response.json();",
							"    pm.expect(homepage.title).to.not.be.undefined;",
							"    pm.expect(homepage.description).to.not.be.undefined;",
							"});",
							"",
							"pm.test(\"homepage contains dashboard\", () => {",
							"    const homepage = pm.response.json();",
							"    pm.expect(homepage.dashboards).to.not.be.undefined;",
							"    ",
							"    const id = pm.collectionVariables.get(\"dashboard.id\");",
							"    const dashboards = homepage.dashboards;",
							"    const dashboard = dashboards.find(dash => dash.id === id);",
							"    pm.expect(dashboard).to.not.be.undefined;",
							"});",
							"",
							"pm.test(\"dashboard has a friendly URL\", () => {",
							"    const homepage = pm.response.json();",
							"    const id = pm.collectionVariables.get(\"dashboard.id\");",
							"    const dashboard = homepage.dashboards.find(dash => dash.id === id);",
							"    pm.expect(dashboard.friendlyURL).to.be.a(\"string\");",
							"    pm.collectionVariables.set(\"dashboard.friendlyURL\", dashboard.friendlyURL);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/public/homepage",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"public",
						"homepage"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get dashboard by Id using public api",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "48b56603-8098-498a-8a7a-cfcc61d6edbd",
						"exec": [
							"pm.test(\"returns 200 OK\", () => {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"response contains dashboard\", () => {",
							"    const id = pm.collectionVariables.get(\"dashboard.id\");",
							"    const dashboard = pm.response.json();",
							"    pm.expect(dashboard.id).to.equal(id);",
							"    pm.collectionVariables.set(\"dashboard.updatedAt\", dashboard.updatedAt);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/public/dashboard/:id",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"public",
						"dashboard",
						":id"
					],
					"variable": [
						{
							"key": "id",
							"value": "{{dashboard.id}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get dashboard by friendlyURL",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "c55c63a3-81eb-42d4-a53c-eff79895f529",
						"exec": [
							"pm.test(\"returns 200 OK\", () => {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"response contains dashboard\", () => {",
							"    const id = pm.collectionVariables.get(\"dashboard.id\");",
							"    const dashboard = pm.response.json();",
							"    pm.expect(dashboard.id).to.equal(id);",
							"    pm.collectionVariables.set(\"dashboard.updatedAt\", dashboard.updatedAt);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/public/dashboard/friendly-url/:friendlyURL",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"public",
						"dashboard",
						"friendly-url",
						":friendlyURL"
					],
					"variable": [
						{
							"key": "friendlyURL",
							"value": "{{dashboard.friendlyURL}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Create draft from Published dashboard",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "e22bbe27-ebaa-4f71-9b2c-d80831a86425",
						"exec": [
							"pm.test(\"returns 200 OK\", () => {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"returns new draft dashboard\", () => {",
							"    const draft = pm.response.json();",
							"    pm.expect(draft.id).to.exist;",
							"    pm.expect(draft.state).to.equal(\"Draft\");",
							"    pm.collectionVariables.set(\"dashboard2.id\", draft.id);",
							"});",
							"",
							"pm.test(\"new draft dashboard has a new id\", () => {",
							"    const dashboardId = pm.collectionVariables.get(\"dashboard.id\");",
							"    const draft = pm.response.json();",
							"    pm.expect(draft.id).not.to.equal(dashboardId);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/dashboard/{{dashboard.id}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"dashboard",
						"{{dashboard.id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Archive dashboard",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "90b45ab4-6d99-4288-be2e-1fcc055f4b22",
						"exec": [
							"pm.test(\"returns 200 OK\", () => {",
							"    pm.response.to.have.status(200);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"updatedAt\": \"{{dashboard.updatedAt}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/dashboard/{{dashboard.id}}/archive",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"dashboard",
						"{{dashboard.id}}",
						"archive"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete text widget",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4d9f9c0d-5fec-426b-92c3-274e1c674692",
						"exec": [
							"pm.test(\"returns 200 OK\", () => {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/dashboard/{{dashboard.id}}/widget/{{textwidget.id}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"dashboard",
						"{{dashboard.id}}",
						"widget",
						"{{textwidget.id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete chart widget",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "f8b47d42-3bc2-42dd-ad97-c29e9aa42b88",
						"exec": [
							"pm.test(\"returns 200 OK\", () => {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/dashboard/{{dashboard.id}}/widget/{{chartwidget.id}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"dashboard",
						"{{dashboard.id}}",
						"widget",
						"{{chartwidget.id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete dataset (Ingest API)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "00abe9e8-2d85-41b3-8925-cef1d8664b02",
						"exec": [
							"pm.test(\"returns 200 OK\", () => {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "apikey",
					"apikey": [
						{
							"key": "in",
							"value": "header",
							"type": "string"
						},
						{
							"key": "value",
							"value": "{{apiKey}}",
							"type": "string"
						},
						{
							"key": "key",
							"value": "x-api-key",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/ingestapi/dataset/:datasetId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"ingestapi",
						"dataset",
						":datasetId"
					],
					"variable": [
						{
							"key": "datasetId",
							"value": "{{dataset.id}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete dashboard",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "8b2088fb-d8cf-4e65-8841-5b5b116f342c",
						"exec": [
							"pm.test(\"returns 200 OK\", () => {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/dashboard/{{dashboard.id}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"dashboard",
						"{{dashboard.id}}"
					]
				},
				"description": "Deletes the test dashboard"
			},
			"response": []
		},
		{
			"name": "Delete draft dashboard",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4013bc8d-b5c4-447d-bdab-f88cbf320925",
						"exec": [
							"pm.test(\"returns 200 OK\", () => {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/dashboard/{{dashboard2.id}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"dashboard",
						"{{dashboard2.id}}"
					]
				},
				"description": "Deletes the test dashboard"
			},
			"response": []
		},
		{
			"name": "Delete topic area",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "d39ff287-57fb-4452-b61d-8d32367c75f0",
						"exec": [
							"pm.test(\"returns 200 OK\", () => {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/topicarea/{{topicarea.id}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"topicarea",
						"{{topicarea.id}}"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "aa868f8c-5b89-4e65-8133-51edeb9daf48",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "71218ece-93e7-4d70-be86-549819a240ad",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "f921fa3c-bcdf-4a56-9dfc-0aa0c627b5ef",
			"key": "baseUrl",
			"value": "http://localhost:8080"
		},
		{
			"id": "a2f6cdfb-de65-4014-852a-9d84ee29c745",
			"key": "token",
			"value": ""
		},
		{
			"id": "857073ed-eca8-4ee4-93b6-28798b5ca8ab",
			"key": "apiKey",
			"value": ""
		},
		{
			"id": "80b292ca-08a3-43ce-babd-7c729ab3765d",
			"key": "testId",
			"value": ""
		},
		{
			"id": "622dfddd-cf8f-43ef-85b1-905db197abd6",
			"key": "topicarea.id",
			"value": ""
		},
		{
			"id": "ae1f01aa-a2dd-4237-93e7-712e79f5f2b7",
			"key": "topicarea.name",
			"value": ""
		},
		{
			"id": "c1d9a784-f896-491d-91c7-58e9c88553fd",
			"key": "dashboard.id",
			"value": ""
		},
		{
			"id": "9063fc2a-28ab-4a04-87c5-45d4ce291fbb",
			"key": "dashboard.name",
			"value": ""
		},
		{
			"id": "dcb35e90-8dab-48d9-992d-d5ca1e5fb152",
			"key": "dashboard.updatedAt",
			"value": ""
		},
		{
			"id": "a8149bca-31ab-4852-9520-632865420957",
			"key": "dashboard.friendlyURL",
			"value": ""
		},
		{
			"id": "e786e4f6-f1f1-4ff5-a198-346161205cc1",
			"key": "dashboard2.id",
			"value": ""
		},
		{
			"id": "a0484716-5835-4540-bf41-ef2a83c23526",
			"key": "textwidget.id",
			"value": ""
		},
		{
			"id": "35056674-fbff-485f-bcef-967b57e20ad6",
			"key": "textwidget.updatedAt",
			"value": ""
		},
		{
			"id": "1c15947c-fdf5-4cf7-8737-c150c6543b72",
			"key": "chartwidget.id",
			"value": ""
		},
		{
			"id": "f12eb729-eb78-4c26-b3db-26490d8114f5",
			"key": "chartwidget.updatedAt",
			"value": ""
		},
		{
			"id": "f28c5cea-5832-4eb6-8c41-6c2b276532d4",
			"key": "settings.updatedAt",
			"value": ""
		},
		{
			"id": "5b5c9535-acee-4f19-b1c4-8af3ec8052bb",
			"key": "settings.publishingGuidance",
			"value": ""
		},
		{
			"id": "8701fbad-4294-4c69-a285-7b10094bfbef",
			"key": "homepage.title",
			"value": ""
		},
		{
			"id": "15cdb48b-1c15-4d85-ae4b-e017ea3e9567",
			"key": "homepage.description",
			"value": ""
		},
		{
			"id": "aba1f381-192b-48ce-98ce-399961de2e8c",
			"key": "homepage.updatedAt",
			"value": ""
		},
		{
			"id": "a5c08d35-36ee-462e-93a4-87cf375f1290",
			"key": "dataset.id",
			"value": ""
		},
		{
			"id": "a08c4b1c-8c42-4541-a8ac-a4e304e35366",
			"key": "dataset.s3Key",
			"value": ""
		},
		{
			"id": "b1ae682c-ce73-4f8d-8554-7e248880a9fd",
			"key": "dataset.s3Key.json",
			"value": ""
		}
	],
	"protocolProfileBehavior": {}
}