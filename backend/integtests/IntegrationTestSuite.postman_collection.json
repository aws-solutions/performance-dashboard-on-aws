{
	"info": {
		"_postman_id": "0c2b1ed7-c894-40bd-a226-c5603d0269f6",
		"name": "Badger Integration Tests",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Create topic area",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "3a0e8288-450b-4657-91f8-a02a4e7900c2",
						"exec": [
							"const testId = new Date().getTime();",
							"pm.collectionVariables.set(\"testId\", testId);",
							"pm.collectionVariables.set(\"topicarea.name\", testId);"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "fb1b2722-1596-49ad-b991-8f862835f3f9",
						"exec": [
							"pm.test(\"returns 200 OK\", () => {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"returns the topic area id\", () => {",
							"    const topicarea = pm.response.json();",
							"    pm.expect(topicarea.id).to.exist;",
							"    pm.collectionVariables.set(\"topicarea.id\", topicarea.id);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"{{topicarea.name}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/topicarea",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"topicarea"
					]
				},
				"description": "Create new topic area for testing purposes"
			},
			"response": []
		},
		{
			"name": "List topic areas",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "39525d4e-e72e-442d-94eb-892d0d40a715",
						"exec": [
							"pm.test(\"returns 200 OK\", () => {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"created topic area is listed\", () => {",
							"    const expectedId = pm.collectionVariables.get(\"topicarea.id\");",
							"    const topicareas = pm.response.json();",
							"    const filtered = topicareas.filter(topicarea => topicarea.id === expectedId);",
							"    const expectedTopicarea = filtered[0];",
							"    pm.expect(expectedTopicarea).to.not.be.undefined;",
							"    pm.expect(expectedTopicarea.id).to.equal(expectedId);",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "c35f1760-d4c7-48de-af7d-6c96a4feb471",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/topicarea",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"topicarea"
					]
				},
				"description": "List topic areas to verify the newly created topic area shows up correctly. "
			},
			"response": []
		},
		{
			"name": "Create dashboard",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "690d1ff3-dfe2-48e4-beee-722a4aef386f",
						"exec": [
							"const testId = pm.variables.get(\"testId\");",
							"pm.collectionVariables.set(\"dashboard.name\", testId);"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "d60c016d-cf63-43aa-87c2-0687022353d2",
						"exec": [
							"pm.test(\"returns 200 OK\", () => {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"returns the dashboard\", () => {",
							"    const dashboard = pm.response.json();",
							"    pm.expect(dashboard.id).to.exist;",
							"    pm.collectionVariables.set(\"dashboard.id\", dashboard.id);",
							"",
							"    pm.expect(dashboard.updatedAt).to.exist;",
							"    pm.collectionVariables.set(\"dashboard.updatedAt\", dashboard.updatedAt);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"{{dashboard.name}}\",\n    \"topicAreaId\": \"{{topicarea.id}}\",\n    \"description\": \"Some markdown for [testing](https://www.google.com)\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/dashboard",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"dashboard"
					]
				},
				"description": "Creates a dashboard in the newly created topic area"
			},
			"response": []
		},
		{
			"name": "Edit dashboard",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "a0aeba4a-c087-4a13-9f35-4d32818a4aae",
						"exec": [
							"pm.test(\"returns 200 OK\", () => {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "43acbc34-b6e6-48d6-b68a-1c1b4d836d30",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"{{dashboard.name}} modified\",\n    \"topicAreaId\": \"{{topicarea.id}}\",\n    \"description\": \"Updated markdown **here**\",\n    \"updatedAt\": \"{{dashboard.updatedAt}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/dashboard/{{dashboard.id}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"dashboard",
						"{{dashboard.id}}"
					]
				},
				"description": "Changes the name of the test dashboard"
			},
			"response": []
		},
		{
			"name": "Get dashboard",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "9f783919-4748-496b-b719-971726d2c2f8",
						"exec": [
							"pm.test(\"returns 200 OK\", () => {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"dashboard name matches\", () => {",
							"    const dashboard = pm.response.json();",
							"    const name = pm.collectionVariables.get(\"dashboard.name\");",
							"    const newName = name + \" modified\";",
							"    pm.expect(dashboard.name).to.equal(newName);",
							"    pm.collectionVariables.set(\"dashboard.name\", newName);",
							"});",
							"",
							"pm.test(\"dashboard description matches\", () => {",
							"    const dashboard = pm.response.json();",
							"    pm.expect(dashboard.description).to.equal(\"Updated markdown **here**\");",
							"});",
							"",
							"pm.test(\"dashboard topicarea matches\", () => {",
							"    const dashboard = pm.response.json();",
							"    const topicAreaId = pm.collectionVariables.get(\"topicarea.id\");",
							"    pm.expect(dashboard.topicAreaId).to.equal(topicAreaId);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/dashboard/{{dashboard.id}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"dashboard",
						"{{dashboard.id}}"
					]
				},
				"description": "Get dashboard by id to verify if new name has been set and dashboard can be retrieved properly."
			},
			"response": []
		},
		{
			"name": "Create text widget",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "e77998a4-c5a5-405e-9953-925281075536",
						"exec": [
							"pm.test(\"returns 200 OK\", () => {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"returns the widget id\", () => {",
							"    const textwidget = pm.response.json();",
							"    pm.expect(textwidget.id).to.exist;",
							"    pm.collectionVariables.set(\"textwidget.id\", textwidget.id);",
							"",
							"    pm.expect(textwidget.updatedAt).to.exist;",
							"    pm.collectionVariables.set(\"textwidget.updatedAt\", textwidget.updatedAt);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"Text widget\",\n    \"widgetType\": \"Text\",\n    \"content\": {\n        \"text\": \"Lorem _ipsum_ **with markdown**\"\n    }\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/dashboard/{{dashboard.id}}/widget",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"dashboard",
						"{{dashboard.id}}",
						"widget"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create 2nd text widget",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "671b73bc-aceb-4fe4-a57f-b48fd3e35ec2",
						"exec": [
							"pm.test(\"returns 200 OK\", () => {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"returns the widget id\", () => {",
							"    const textwidget = pm.response.json();",
							"    pm.expect(textwidget.id).to.exist;",
							"    pm.collectionVariables.set(\"textwidget2.id\", textwidget.id);",
							"",
							"    pm.expect(textwidget.updatedAt).to.exist;",
							"    pm.collectionVariables.set(\"textwidget2.updatedAt\", textwidget.updatedAt);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"Another text widget\",\n    \"widgetType\": \"Text\",\n    \"content\": {\n        \"text\": \"Basic text\"\n    }\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/dashboard/{{dashboard.id}}/widget",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"dashboard",
						"{{dashboard.id}}",
						"widget"
					]
				}
			},
			"response": []
		},
		{
			"name": "Check text widgets are in dashboard",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "245faeae-c4f6-4582-a482-b4d70e7e1f90",
						"exec": [
							"pm.test(\"returns 200 OK\", () => {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"text widget is included in dashboard\", () => {",
							"    const dashboard = pm.response.json();",
							"    const textwidgetId = pm.collectionVariables.get(\"textwidget.id\");",
							"    pm.expect(dashboard.widgets).to.exist;",
							"",
							"    const widgets = dashboard.widgets.filter(widget => widget.id === textwidgetId);",
							"    pm.expect(widgets.length).to.equal(1);",
							"",
							"    const textwidget = widgets[0];",
							"    pm.expect(textwidget.id).to.equal(textwidgetId);",
							"    pm.expect(textwidget.widgetType).to.equal(\"Text\");",
							"});",
							"",
							"pm.test(\"2nd text widget is included in dashboard\", () => {",
							"    const dashboard = pm.response.json();",
							"    const textwidgetId = pm.collectionVariables.get(\"textwidget2.id\");",
							"    pm.expect(dashboard.widgets).to.exist;",
							"",
							"    const widgets = dashboard.widgets.filter(widget => widget.id === textwidgetId);",
							"    pm.expect(widgets.length).to.equal(1);",
							"",
							"    const textwidget = widgets[0];",
							"    pm.expect(textwidget.id).to.equal(textwidgetId);",
							"    pm.expect(textwidget.widgetType).to.equal(\"Text\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/dashboard/{{dashboard.id}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"dashboard",
						"{{dashboard.id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Re-order widgets",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "3da8adfd-cfd0-48d3-aded-55a8c26a397d",
						"exec": [
							"pm.test(\"returns 200 OK\", () => {",
							"    pm.response.to.have.status(200);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"widgets\": [\n        {\n            \"id\": \"{{textwidget.id}}\",\n            \"order\": 2,\n            \"updatedAt\": \"{{textwidget.updatedAt}}\"\n        },\n        {\n            \"id\": \"{{textwidget2.id}}\",\n            \"order\": 1,\n            \"updatedAt\": \"{{textwidget2.updatedAt}}\"\n        }\n    ]\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/dashboard/{{dashboard.id}}/widgetorder",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"dashboard",
						"{{dashboard.id}}",
						"widgetorder"
					]
				}
			},
			"response": []
		},
		{
			"name": "Fetch latest dashboard updatedAt",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "20dd8e9a-2268-4337-9bc7-5a7626e14bfd",
						"exec": [
							"pm.test(\"returns 200 OK\", () => {",
							"    pm.response.to.have.status(200);",
							"    const dashboard = pm.response.json();",
							"    pm.collectionVariables.set(\"dashboard.updatedAt\", dashboard.updatedAt);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/dashboard/{{dashboard.id}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"dashboard",
						"{{dashboard.id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Verify draft dashboard is not yet public",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "c0542246-51bb-43f4-b933-fbf17f1d69dd",
						"exec": [
							"pm.test(\"returns 404 not found\", () => {",
							"    pm.response.to.have.status(404);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/public/dashboard/:id",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"public",
						"dashboard",
						":id"
					],
					"variable": [
						{
							"key": "id",
							"value": "{{dashboard.id}}",
							"type": "string"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Set dashboard to publish pending",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "fc4beae0-0650-498a-b269-2de3667179b2",
						"exec": [
							"pm.test(\"returns 200 OK\", () => {",
							"    pm.response.to.have.status(200);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"updatedAt\": \"{{dashboard.updatedAt}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/dashboard/{{dashboard.id}}/publishpending",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"dashboard",
						"{{dashboard.id}}",
						"publishpending"
					]
				}
			},
			"response": []
		},
		{
			"name": "Fetch latest dashboard updatedAt",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "a886b4de-4762-45e9-ae98-b03c0aea466b",
						"exec": [
							"pm.test(\"returns 200 OK\", () => {",
							"    pm.response.to.have.status(200);",
							"    const dashboard = pm.response.json();",
							"    pm.collectionVariables.set(\"dashboard.updatedAt\", dashboard.updatedAt);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/dashboard/{{dashboard.id}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"dashboard",
						"{{dashboard.id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Publish dashboard",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "5e8fca86-c723-47ec-9e92-8abfaf46fd6e",
						"exec": [
							"pm.test(\"returns 200 OK\", () => {",
							"    pm.response.to.have.status(200);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"updatedAt\": \"{{dashboard.updatedAt}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/dashboard/{{dashboard.id}}/publish",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"dashboard",
						"{{dashboard.id}}",
						"publish"
					]
				}
			},
			"response": []
		},
		{
			"name": "Verify dashboard shows in homepage",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "c5ae5e31-4849-4fd8-82bf-4316834cbf68",
						"exec": [
							"pm.test(\"returns 200 OK\", () => {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"homepage contains title and description\", () => {",
							"    const homepage = pm.response.json();",
							"    pm.expect(homepage.title).to.not.be.undefined;",
							"    pm.expect(homepage.description).to.not.be.undefined;",
							"});",
							"",
							"pm.test(\"homepage contains dashboard\", () => {",
							"    const homepage = pm.response.json();",
							"    pm.expect(homepage.dashboards).to.not.be.undefined;",
							"    ",
							"    const id = pm.collectionVariables.get(\"dashboard.id\");",
							"    const dashboards = homepage.dashboards;",
							"    const dashboard = homepage.dashboards.find(dash => dash.id === id);",
							"    pm.expect(dashboard).to.not.be.undefined;",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/homepage",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"homepage"
					]
				}
			},
			"response": []
		},
		{
			"name": "Verify dashboard using public api",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "45e2b3e4-32c0-48f0-9bf3-1b02ce594256",
						"exec": [
							"pm.test(\"returns 200 OK\", () => {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"response contains dashboard\", () => {",
							"    const id = pm.collectionVariables.get(\"dashboard.id\");",
							"    const dashboard = pm.response.json();",
							"    pm.expect(dashboard.id).to.equal(id);",
							"    pm.collectionVariables.set(\"dashboard.updatedAt\", dashboard.updatedAt);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/public/dashboard/:id",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"public",
						"dashboard",
						":id"
					],
					"variable": [
						{
							"key": "id",
							"value": "{{dashboard.id}}",
							"type": "string"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Create draft from Published dashboard",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "6ba904eb-2243-4513-a6e6-cb99c7625234",
						"exec": [
							"pm.test(\"returns 200 OK\", () => {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"returns new draft dashboard\", () => {",
							"    const draft = pm.response.json();",
							"    pm.expect(draft.id).to.exist;",
							"    pm.expect(draft.state).to.equal(\"Draft\");",
							"    pm.collectionVariables.set(\"dashboard2.id\", draft.id);",
							"});",
							"",
							"pm.test(\"new draft dashboard has a new id\", () => {",
							"    const dashboardId = pm.collectionVariables.get(\"dashboard.id\");",
							"    const draft = pm.response.json();",
							"    pm.expect(draft.id).not.to.equal(dashboardId);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/dashboard/{{dashboard.id}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"dashboard",
						"{{dashboard.id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Archive dashboard",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "a36b0f17-4401-4860-a6a9-3333045d8872",
						"exec": [
							"pm.test(\"returns 200 OK\", () => {",
							"    pm.response.to.have.status(200);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"updatedAt\": \"{{dashboard.updatedAt}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/dashboard/{{dashboard.id}}/archive",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"dashboard",
						"{{dashboard.id}}",
						"archive"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete text widget",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "e1f9b8a5-2e04-4c3f-88ed-e40beb882ff3",
						"exec": [
							"pm.test(\"returns 200 OK\", () => {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/dashboard/{{dashboard.id}}/widget/{{textwidget.id}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"dashboard",
						"{{dashboard.id}}",
						"widget",
						"{{textwidget.id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete 2nd text widget",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "618148a2-ecfb-4adb-a930-c905d931f0f3",
						"exec": [
							"pm.test(\"returns 200 OK\", () => {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/dashboard/{{dashboard.id}}/widget/{{textwidget2.id}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"dashboard",
						"{{dashboard.id}}",
						"widget",
						"{{textwidget2.id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete dashboard",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "0b68cb0d-1cc1-434b-ba9a-f5054aaa1780",
						"exec": [
							"pm.test(\"returns 200 OK\", () => {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/dashboard/{{dashboard.id}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"dashboard",
						"{{dashboard.id}}"
					]
				},
				"description": "Deletes the test dashboard"
			},
			"response": []
		},
		{
			"name": "Delete draft dashboard",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "0eb24190-8204-4438-a514-ed06b503ead4",
						"exec": [
							"pm.test(\"returns 200 OK\", () => {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/dashboard/{{dashboard2.id}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"dashboard",
						"{{dashboard2.id}}"
					]
				},
				"description": "Deletes the test dashboard"
			},
			"response": []
		},
		{
			"name": "Delete topic area",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "f04c7f2f-e4c2-4bf1-b159-da6a4d2c4205",
						"exec": [
							"pm.test(\"returns 200 OK\", () => {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/topicarea/{{topicarea.id}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"topicarea",
						"{{topicarea.id}}"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "c7d4e318-982f-42df-beaf-98c626b8b6b0",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "5b6a60f0-22bb-4299-ac0b-987ab8b035fc",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "c5c45cc5-e083-4dba-b925-bff85355353f",
			"key": "baseUrl",
			"value": "http://localhost:8080"
		},
		{
			"id": "d46a2eb7-c935-4504-9ac0-ada04b1a5f1c",
			"key": "token",
			"value": ""
		},
		{
			"id": "ff66299a-e0c1-4f1f-a6d8-7dbf1c922313",
			"key": "testId",
			"value": ""
		},
		{
			"id": "d1489cbc-ce81-4ded-a094-5ad65352c094",
			"key": "topicarea.id",
			"value": ""
		},
		{
			"id": "e19875fd-9cf7-4773-ac7e-fa450992e469",
			"key": "topicarea.name",
			"value": ""
		},
		{
			"id": "6619e31e-55a9-42d6-be7a-ee3e64995d85",
			"key": "dashboard.id",
			"value": ""
		},
		{
			"id": "e067a0e2-b043-469f-95bb-42776240b3e3",
			"key": "dashboard.name",
			"value": ""
		},
		{
			"id": "298bfe6c-e56d-4d23-b493-bb0f2834ca83",
			"key": "dashboard.updatedAt",
			"value": ""
		},
		{
			"id": "a8abd53c-b46e-4f67-b28f-7a8174610136",
			"key": "dashboard2.id",
			"value": ""
		},
		{
			"id": "6226da1d-579c-4342-b59a-08bea5a1af02",
			"key": "textwidget.id",
			"value": ""
		},
		{
			"id": "34471979-189e-4857-b225-5a004afb77a7",
			"key": "textwidget.updatedAt",
			"value": ""
		},
		{
			"id": "27ce3c9a-fc3d-4bbc-a063-c2045356bd7f",
			"key": "textwidget2.id",
			"value": ""
		},
		{
			"id": "790a3cdc-ee64-4308-af4c-9f9049255765",
			"key": "textwidget2.updatedAt",
			"value": ""
		}
	],
	"protocolProfileBehavior": {}
}